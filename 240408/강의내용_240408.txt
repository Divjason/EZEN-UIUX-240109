*JavaScript를 활용한 가위.바위.보 게임 만든적이 있음!!!

*자료구조 측면
1.사용자(=나)가 가위.바위.보 중 하나를 선택한다
> 나의 의지로 직접 선택
> 이벤트 (웹 브라우저 화면 => 버튼 // 클릭이벤트)
> 상태변화=업데이트 : useState

2.컴퓨터도 가위.바위.보 중 하나를 선택한다
> 랜덤형식으로 선택
> JS / random( ) / Math => 0, 1 ,2

3.사용자 VS 컴퓨터 중 둘 중에 누가 이기고, 졌는지 판단!!!
> 사용자 & 컴퓨터 각각 선택한 값 => 공통된 하나의 값에서 출력.관리
> 배열

4.결론
- 가위, 바위, 보 게임을 만들기 위해서 자료의 형태!!! => 배열로 가야한다
- 배열 : 데이터의 순서를 정렬 할 수 있는 장점
- 단점 : 객체처럼 복수의 데이터를 저장.관리
- 가위 : 가위 이미지 + 식별이 가능한 정보 데이터
> 결론 : 데이터를 객체로 관리하되, 필요한 경우에 따라서 배열화할 수 있으면 좋을 것 같음!!!

*UI 구성!!!!
1.버튼 (*state 값을 변화시켜줄 수 있는 역할)
2.출력 이미지 (*가위.바위.보) x 2개 => 내것 VS 컴퓨터 (*state 값이 업데이트)
3.2개의 그룹 = 2개의 컴포넌트로 분리!!!
4.App => 2개의 컴포넌트를 만들고 => props 관리!!

폰트 : pretendard

1.객체 기반 혹은  객체 지향 언어에서 Class가 필요한 이유!
- 대다수의 Data가 객체 자료 형식을 갖기 마련
- 반복적으로 사용되는 객체 자료 형식을 커스텀해서 사용
(*굉장히 유사한 패턴을 가지고 있는 객체 자료를 다수 생성)

컴포넌트 : 부모 & 자식
부모 컴포넌트가 사용중인 css 스타일 파일은
자식 컴포넌트에게도 영향을 줌

*react.js 10년 전, class 타입 컴포넌트만 존재!!!
*2016년이 되면서, class 불편함
> 객체 커스터마이징 생성!!!
> class : 붕어빵 틀
> 객체 : 프로토타입
> 객체 : 붕어빵 (인스턴스)
*공홈 : 앞으로는 가급적 함수형 컴포넌트 위주로 사용!!
(*훅)
*장점 : 리액트 훅!!!
국내 기업 : 함수형 컴포넌트
문제는 이전까지 작업해왔던 class 컴포넌트 사이트
*F/E : 99.9% => 함수형 컴포넌트
*