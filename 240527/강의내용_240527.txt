Recoil :
- todo 값을 저장.보관.출력
(*초기 : 문자열 형식)
(*중기_1 : 문자열을 담고 있는 배열 형식)
(*중기_2 : 배열을 담고 있는 객체 형식)
> 보드 3개 : ToDo / Doing / Done
(*말기 : 객체 > 배열 > 객체)
> 1개의 toDo : ID & Text

- 타입 오류 계속발생
> 문자 | 배열 | 객체

React-Hook-Form
> input 값을 전달 
> input 값을 저장 / 이벤트 핸들러 / reset 내부 함수
> useSetRecoilState 훅 함수 / Recoil | atoms 값을 변화!!

beautiful DnD
> 라이브러리
> DragDropContext
> Droppable
> Draggable
> 직접적으로 자식 요소 컴포넌트 혹은 태그 x
> 함수의 반환값의 형태로 사용!
> magic / snapshot 자식요소 전달 (*함수 매개변수)
> props

1.자료구조
- 해시테이블 = hash table
> stack (*입.출구 1개 자료구조)
> queue (*입.출구 별도 자료구조)
> dequeue (*입.출구 모두 삭제, 추가 개발형 자료구조)

- 테이블 형식 (*행 & 열 구조)
- 행.열 데이터를 하나씩 구조
- 2002년 월드컵
1 이운재
4 최진철
20 홍명보
6 유상철
22송종국
21 박지성
5 김남일
10 이영표
8 최태욱
9 설기현
14 이천수

*해시테이블
무한하고, 불규칙적으로 나열되어 있는 데이터를 한정된 영역안에서 규칙적이고 효율적으로 관리하기 위한 목적으로 탄생된 테이블 형태의 자료 구조!!!

*해시함수
해시테이블을 구성하기 위해서 생성된 연산 함수

*해시테이블의 장점
- 빠른 데이터 읽기 & 삭제 & 삽입

*해시테이블의 단점
- 기능 효율성을 추구하는데 독립적이 못하다!!!
- 아무리 해시테이블을 잘 만들어놨어도, 해시함수가 엉성하면 기능의 효율성이 아주 않좋아질 수 있음

*해시테이블의 자료구조에서 자주 사용하는 기능!!!!
- 테이블에 데이터를 삽입 : add(data)
- 테이블에 데이터를 체크 : isContain(data)
- 테이블에 데이터를 제거 : remove(data)
- 테이블 행 자료를 비우기 : clear
- 테이블에 데이터가 비어있는지 체크 : imsEmpty( )
- 테이블에 있는 모든 데이터를 출력 : printAll( )

*특정 자료구조 형태를 만들기 위해서는 class를 활용해서 데이터의 큰 형태를 준비 => 구현!!!!

- 해시셋 = Hashset
 JS Map & Set
> JS iterable object : 반복 순회할 수 있다
> for of / forEach / for in
> Map 규칙 => 이터러블한 객체로 만들어 줄 수 있었음 (*.next( ))
> Set => 이터러블한 객체로 만들어 줄 수 있었음 (*하지만, 중복되는 값은 허용하지 않는 규칙) => 로또 번호를 Set 
=> 해시 테이블 생성 => 중복되어는 key 방지!!!


*자료구조 형태
1. stack
2. queue
3. dequeue
4. hashTable
5. hashSet

*알고리즘

2.코딩테스트
- 3개

*희망을 포기하지 마라.
희망이 있는한 삶은 가치가 있는 것이다!!!

*애니메이션 효과!!!
- framer-motion

*넷플릭스 
- recoil
- react-hook-form
- styled-component
- type-script
- Browser-Router
- react-query
