SCSS
1.Nesting : 중첩기능
- 동일한 부모 선택자를 반복적으로 사용하지 않을 수 있는 효율성!!!

2.부모요소를 찾아오는 방법 : &
=> 전.후문자 선택자
=> CSS / SCSS

*html & css를 활용한 프로젝트를 작업!!
> 박스구조화 / class값을 작명 => 상위에서 하위로 내려오면서 유사한 패턴!!!

*flex & grid & float
=> 혼용해서 사용해도 문제가 하나도 없는데, 실제 실무에서는 이렇게 작성하는 경우가 거의 없다!!! / 필요성!!!!

*고급언어 / 상위문법의 공통점 : 디버깅 굉장히 수월하다!!! => 버그가 발생하면 즉각적으로 알려줌!!!

*현대의 UI 스타일 => 컴포넌트 스타일 시스템 => 하나의 템플릿 양식 => 상황에따라서 가져다가 사용 => 디자인의 효율성 / 일관성!!!!

*80~90% 질문!!!
> 변수? => 오타 / 일정한 스타일

*커리큘럼?!!!
html / css => float / flex / grid
scss => 프로그래밍 언어 형식!!!
변수!!!! => 전역변수 (*지상파 방송 => 전국구 대상 방송) / 
지역변수 (*지역 방송 => SBS / JTV)
SBS => 광고!!! 

내가 만약 SCSS 프로젝트 스타일 => A to Z : SCSS
CSS || SCSS : x

JS : 연산자!!!!
- 산술연산자 : +, -, *, /, %(피연산자간 나누기를 한 이후에 나머지값을 찾아올 때)
- 비교연산자 : A, B (>, <, >=, <=, !=, =)
- 논리연산자 : true, false

함수 : 어떤 구현하고자하는 기능들을 한데 모아놓은 집합소!!!!
=> 형태 : 함수이름 ( ) : functionA (매개"변수", 매개변수, 매개변수)
=> 기능을 실행!~!!!!!

변수 / @mixin / @include / @extend
SCSS 활용해서 어떤 값을 만들어놓았는데, 
map-get

JS : map / set 내장함수
> SCSS / 

if : 만약에 ~ 한다면 (*긍정) / else : 만약에 ~ 안한다면 (*부정)
> CSS에서는 조건문 사용x
> SCSS에서 조건문 값을 적용!!!
if ( 조건식 => true ) {
 실행문!!!!
}

1.div > 사각형

2.전.후문자 선택자 = before / after 활용 : 각 원을 만들어서
위치를 이동!!!

3.하트모양으로 만든다

4.animation : keyframes를 활용해서 일정시간에 맞춰서 크기를 조정한다. => scale( )










