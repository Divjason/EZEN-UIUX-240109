*Mac 유저 : 그림판!!! => 이미지 맵 / 좌표!!
*Google : image map generator

*주중 학습 내용 => 주말 복습 (x)
*주중 학습 내용 => 주중 복습 / 주말 리프레쉬 (o)
*6개월 시간 => 아주, 매우 고통스러운것이 정상!!

html 태그 : input 태그
- 신입 / 초급
- 입사 => 실무 프로젝트 x
(*기존 프로젝트 작업물 연습 => PM)
(*input / nav / toggle)
(*회원가입 / 로그인 => input)

form : table (*바깥에 커버)
> input : 속성 화면이 달라짐
text / password / file / submit
checkbox / radio / email / search
range / week / time / month

> textarea : 리뷰 및 댓글창 등을 생성하고자 할 때

> select / option = ul / li : 어떤 옵션을 선택하도록 하고자 할 때 사용할 수 있는 태그

> optgroup / option = 옵션을 그룹핑하고자 할 때 사용하는 태그

> fieldset / legend = form 태그를 스타일링하는 역할

1.아이디 & 패스워드 입력 후 로그인 버튼 클릭

2.입력된 아이디 & 패스워드를 찾아서 매칭된 정보를 가져와야 로그인이 되요

3.사용자가 입력한 아이디 & 패스워드 정보를 "서버"에서 가져올 수 있어야 매칭이라는 행위

*CS (*computer science = 컴퓨터 공학)

http://localhost:3000/process_login?search=park
http://localhost:3000/process_login

https://search.naver.com/
search.naver?where=nexearch
&sm=top_hty
&fbm=0
&ie=utf8
&query=adidas

*보안
*퍼블리셔 / 프론트엔드개발자

다양한 html 태그 : 20개 조금 넘는 태그!!!!

html1
html2
html3
html4 => xml => extensible : 홑태그 (*single) => 반드시 multi tag 동일한 효과 및 성능을 낼 수 있다라는 부분을 시각적으로도 표현해주자!!! (*홑태그 /)
html5 (/)

HTML : Hyper Text Markup Language
> 사람의 뼈 / 건물 구조

CSS : Cascading Style Sheet
> 폭포수 (*CSS 부모요소에 적용한 스타일요소 => 자식요소에 해당 스타일 "상속" 받음)

스타일 적용하는 방법

1) 인라인 스타일 (0.1%)
2) 내부 스타일 (거의 없음)
3) 외부 스타일 (99.9%)

> why? 코드를 작성할 때, 1개의 단일 파일안에 가급적 최소한의 정보를 담으려고하는 노력!!! (*기본적인 마인드 => 디자이너, 퍼블리셔, 개발자)

> if, 1개의 단일 파일이 각 기능에 따라서 분할되어 있었더라면 => check / ex. 이 문제가 A파일 / B파일 문제

> 버그 (bug) => 내가 작성하거나 만든 프로젝트 코드 및 프로그래밍 언어 의도치 않은 문제발생

> 디버깅 (debuging) => 버그를 찾아서 해결하는 행위

> 트러블슈팅 (trouble shooting) => 버그 뿐만 아니라, 현재 작동되고 있는 서비스에서 보다 효율적으로 무언가를 개선하는 행위

> 트러블슈팅을 전문으로하는 사람 = trouble shooter
(*공고 : 트러블슈팅 경험이 많은 사람)
(*면접 : 국비 수업 > 팀플 > 트러블슈팅 경험)

상대경로 : 현재 내가 작업중인  폴더를 기준으로 경로를 찾아오는 것 / 
절대경로 : 내가 작업중인 폴더가 아니라 root folder를 기준으로 경로를 찾아오는 것

*html tag를 작성하는데 있어서 모든 태그가 똑같이 작동하지 않고 있다!! 눈썰미있게 확인!!!

*html 태그는 크게 2가지 부류로 나눠서 생각해볼 수 있음
(공식적으로)

1) block Tag
- 현재 해당 태그가 위치한 그 영역의 한 줄(*가로 = 행)을 전체 사용한다
ex. h(n), div, fieldset, form, hr, p, ul, ol, li

2) inline Tag
- 현재 해당 태그가 위치하 그 영역의 한 줄을 다른 인라인 태그들과 공유해서 사용한다
ex. img, a, br, button, label, span, textarea, input

html5 문법 : 
- 의미를 부여한 div태그를 만들어준다면 어떨까?
- semantic tag
- semantic : 의미론적인

버튼안에 입력되어있는 텍스트 => 컨텐츠
이 컨텐츠를 감싸안고 있는 테두리 => 보더 (border)
컨텐츠와 보더 사이의 간격을 넓히려면, 패딩(padding)

*CSS : 스타일 적용하는데 있어서 공통적인 형태!!!
- html에서 스타일을 적용하고자 하는 특정 요소를 선택 및 불러와서 해당 요소에 스타일을 정의
- html에서 찾아서 불러온 태그 = 선택자 (*selector)
- css에서는 선택자에게 어떤 스타일을 부여하고자 한다면, 반드시 중괄호!!!!
*선택자 { 스타일 속성명 : 속성값 }

*h1 = 32px; 
*html에서 기본적으로 텍스트를 작성했을 때, 폰트 사이즈 16px

*포트폴리오 홈페이지 작업!!!
> 마진x 패딩x / 레이아웃!!!
> html이 기본적으로 주는 마진 존재 / h태그를 포함한 거의 대부분의 태그 본연의 margin / padding

CSS를 학습할 때, 가장 중요한 요소!!!
> 선택자 종류 다양!!!!
1) 전체선택자 :
- * / css 스타일을 적용하기에 앞서서 reset하고자 할 때

2) 태그 = html tag선택자 :
- html에서 작성한 tag를 직접 불러와서 스타일 적용하고자 할때

3) 아이디선택자 = html에서 id 속성값을 사용하고 있는 태그를 선택해서 불러오고자 할 때 => 반드시 #아이디속성값
단독의 유일한 값을 보유하고있는 요소에 스타일을 적용하고자 할 때 주로 사용한다 (*주의사항 : 동일한 아이디 속성값이 존재해서는 안된다)

4) 클래스선택자 = html에서 class속성값을 사용하고 있는 태그를 불러오고자 할 때 => 반드시 .클래스속성값
동일한 스타일을 복수의 태그 및 요소에 적용하고자 할 때 

5) 후손선택자
6) 자손선택자
7) 속성선택자
8) 동위선택자
9) 구조선택자
10) 반응선택자
11) 상태선택자
12) 링크선택자
13) 문자선택자
14) 부정선택자

내가 지금 자리가 바뀌어서 다른곳에서 git-hub에 데이터를 올려야하는 상황이 발생한다면?!!!

1) 기존에 내가 git-hub에 올려놨던 데이터를 그대로 다 가지고 있는 상황이라면 : git push origin +master

2) 기존 데이터를 백업해놓은 것이 없다면, 기존에 git-hub에 올라가 있는 데이터를 먼저 다운받아야 함!!!
모두 내려받은 후에 그동안 사용했던 컴퓨터가 아닌 새로운 공간에서 다운을 받고자하면, 에러메세지 발생!!!!

집에가서 해야할 일
1.폴더를 생성한다

2.해당 폴더를 root 폴더로 잡고 vs code를 연다

3.vs code > 터미너를 연다

4.터미널 > git bash를 선택한다

5.해당 폴더에 git을 초기화한다 (*최초에만)
- git init

6.최초에만 아래 명령어를 입력한다
git pull origin master(main) --allow-unrelated-histories

7.다음부터는 아래 명령어를 입력한다
git pull origin master(main)

(단, 예외가 있다!!!! 
> 레파지토리안에 브랜치명이 master가 아닌 main경우!!)
> 내 로컬컴퓨터의 브랜치명도 main으로 바꿔줘야 한다.
> git branch -m master main






