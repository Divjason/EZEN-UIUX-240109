<JS Process>

1.변수

2.자료형(태/식)

3.자료형 변환 = 형변환
- 문자 => 숫자 Number( )
- 숫자 => 문자 String( )
- 문자 & 숫자 => 논리 Boolean( )

4.연산자
- 산술연산자 
- 연결연산자
- 할당연산자
- 비교연산자
- 논리연산자
(*삼항 조건연산자)

5.제어문
- 조건문
> if문
> if...else문 (*else if)
> switch...case문

- 반복문
> for문
> forEach문
> for...in문
> for...of문
> while문
> do...while문
(*break문 & continue문)

6.함수
- 클래스 / 익명 / 화살표
- 매개변수 & 인수(*인자값)
- return (*함수 결과값 반환)
- 스코프 (*블록 / 지역 / 전역)
- var x / 지역스코프 변수 / const (*권장)
- 즉시실행함수
- 변수선언 키워드 입력 => 전역변수
- hoisting (*클래스함수 VS 익명함수 & 화살표)
- 1급 시민
- 전개연산자 구문
- 나머지 매개변수
- 시간관련 내장함수
(*setInterval / clearInterval / setTimeout)
- 재귀함수

7.DOM
- querySelector / getElement
- innerText / innerHTML / textContent
- "on" 이벤트 핸들러
- classList
- add( ) <-> remove( ) / toggle( )
- contains( )
- form
- dom 선택자를 통해서 값을 찾아오는 방법 => value
> #, ., tag
> name
> form 배열 요소

8.Event
- 이벤트 종류
> 문서 로딩 이벤트
> 마우스 이벤트
> 키보드 이벤트
> 폼 이벤트
- 이벤트 처리
> 인라인 스크립트 : html 문서에 직접 이벤트 정의!!!
> 외부 스크립트 : 이벤트 핸들러
> 외부 스크립트 : 이벤트 리스너
- 이벤트 전파
> 이벤트 버블링
> 이벤트 캡처링

9.DOM 심화
- createElement( )
- createTextNode( )
- appendChild( )
- createAttribute( )
- setAttributeNode( )
- remove( )
- parentNode
- removeChild( )

10.객체
- window : 웹 브라우저 안에 있는 최상위 "객체"
> 내장객체 : window 기본적으로 탑재되어있는 객체
- Date( ) (날짜객체)
- 밀리초
- Math (수학객체)

11.객체 심화
- 객체 key & value : Property 
- 객체 Property 삭제 : delete object.key
- 객체 중첩
- 객체 메서드 함수
- 객체생성 방법
> new Object( )
> 생성자함수
> class
- 객체속성 반복
> Object.keys( )
> Object.values( )
> Object.entries( )
- 생성자함수 & class 상속
> prototype 속성
> __proto__ 속성
> 생성자함수 : Object.setPrototypeOf(상속받고자 하는 함수, 상속가능한 함수)
> class : extends 키워드를 활용해서 상속

12.문자열
- charAt( ) : 매개변수의 인덱스값을 가지고 있는 문자열을 찾아올 때
(*문자열[인덱스값]으로도 사용가능!)

- indexOf( ) : 매개변수 문자열을 처음 찾았을 때의 인덱스 값을 찾아올 때

- startWith( ) : 문자열 전체에서 처음 시작하는 단어가 맞는지 확인
(*매개변수 2개를 전달 : 첫번째 매개변수가 두번째 매개변수의 위치에서 시작)

- endWith( ) : startWith( ) 문법과 동일하게 작동 (*문자열의 뒤에서부터 서칭)

- includes( ) : 문자열 안에 매개변수의 문자가 있으면 true / 아니면 false

- trim( ) / trimStart( ) / trimEnd( ) : 문자열의 전체/앞/뒤에서 빈문자열을 찾아서 없애주는 기능

- substring( ) : 매개변수는 1개 혹은 2개 입력가능!!
> 매개변수 1개 : 해당 매개변수의 인덱스값부터 문자열의 끝까지 모두 찾아오는 기능
> 매개변수 2개 : 첫번째 매개변수 부터 두번째 매개변수의 바로 앞까지 문자열을 찾아오는 기능

- slice( ) : 기본적으로 substring( )과 문법이 동일하나 차이점 => 음수 매개변수를 인식한다!!!

- split( ) : 매개변수를 기준으로 값을 나눠서 배열로 변환시키는 함수

13.정규표현식
- 패턴/플래그
- ^:캐럿 (*특정 문자열로 시작할 때 사용)
- $:달러 (*특정 문자열로 끝날 때 사용)
- []: 범위설정 (*^의 경우, 범위 영역 내.외부에 따라 의미 상이함)
- [0-9] : 모든 숫자 의미
- [a-z] : 모든 문자 의미
- /[a-z]/i : 플래그 i => 대.소문자 구분없이 모두
- /[a-z]/g : 플래그 g => 문자열 내 해당되는 모든 문자 선택
- /\d{3}/ : 숫자 3개 나열되는 문자열 선택
- test( ) : 정규표현식에 일치하는 부분 문자열이 있으면 true, 아니면 false
- match( ) : 정규표현식에 일치하는 부분 문자열 찾기

14.문자열 및 배열 메서드
- split( ) : 구분자를 기준으로 문자열을 배열로 변환
- [...str] : 순수 문자열을 배열로 변환
- Array.from(str) : 순수 문자열을 배열로 변환
- arr.join(구분자) : 배열을 다시 문자열로 변환
- 배열생성하기 : new Array( )
- forEach(값, 인덱스, 배열)
- 서로 다른 배열 합치기
> arr.concat(배열, 배열)
> [arr01, ...arr02]
- reverse( ) : 배열 요소를 거꾸로 나열할 때 사용
- sort( ) : 배열 내 값의 크기에 따라 내림차순 및 오름차순 정렬
- pop( ), push( ) : 배열 내 맨 뒤에 값을 제거 및 추가할 때 사용
- shift( ), unshift( ) : 배열 내 맨 앞에 값을 제거 및 추가할 때 사용
- arr.splice(위치) : 특정 위치 부터 끝까지 요소 삭제
- arr.splice(위치, 숫자) : 특정 위치 부터 숫자 개수만큼 삭제
- arr.slice(위치) : 특정 위치에서 끝까지 추출
- arr.slice(위치01, 위치02) : 위치01에서 위치02직전까지 추출
- splice( ) VS slice( ) 차이점 : splice는 원래배열에 영향을 줌 / slice는 원래배열에 영향 안줌
- map( ) : 기존 배열을 둔 상태에서 새로운 배열을 만들고 싶을 때
- filter( ) : 기존 배열에서 특정 조건에 부합하는 요소만 추려서 새로운 배열을 만들고 싶을 때
- reduce( ) : 기존 배열 내 아이템을 하나씩 찾아서 누적 연산작업을 하고 싶을 때
