*React가 다루고 있는 가장 큰 핵심 문제 & 과제
state를 어떻게 관리하고 전파!!!

*Recoil : atom을 하나 생성해놓고, atom 내부에 관리되고 있는 state값을 하위 컴포넌트 페이지들이 가져다 사용할 수 있는 구조

*Recoil을 사용하지 않은 상태에서 state 관리
> ex. dark & light
> 기본값 => light 시작
> chart 컴포넌트에게 dark & light
> state 전달 => props drilling

*Recoil 라이브러리 안에 있는 atom의 default값을 가져와서 사용하려면 리액트 훅!!!
useRecoilValue

*Recoil 라이브러리 안에 있는 atom의 default값을 가져와서 편집 및 가공을해서 사용하려면 리액트 훅!!!
useSetRecoilState

*useRecoilValue + useSetRecoilState => useRecoilState

> Recoil 라이브러리를 사용해서 state 값을 관리할 때 VS Props Drilling을 통해서 state 값을 전달할 때 비교!!!

*Redux : UI > action > reducer

완전 새로운 프로젝트!!!!
Recoil & React Hook Form => ToDoList
드래그 & 드랍 기능 => Canvan Board 형태의 ToDoList

npm i styled-components
npm i @types/styled-components
npm i react-router-dom
npm i react-query
npm i recoil

"target": "esnext",
"moduleDetection": "force",
"downlevelIteration": true,
"noImplicitAny": true,
"noImplicitThis": false,

  "ts-node": {
    "esm": true
  },

Form 요소!!!!

React-hook-form
사용하지 않았을 때
VS
사용했을 때 
유효성 검사!!!!
> 아이디 몇자이상
> 패스워드 대문자 + 소문자 조합 + 몇자이상

JS 알고리즘
Form 요소
> 정규표현식!!!

*JS Coding Test

*JS 자료구조 & 알고리즘
-> UX/UI 디자이너
-> 퍼블리셔
-> F/E

*로직설계 => 문제를 해결하고자 할 때
어떤 변수 => value 고민!!
객체 / 배열 / 문자열 어떤 자료형태로 문제해결 효율

*JS 공부 근본적 변수, 함수, 객체 툴
> 자료구조 / 알고리즘

*JS 
> 자료구조 / 알고리즘 머리 개념 정립x
> 단기간 결과물 도출
> 파이썬 & Java

*컴공학부
> 4년 / 자바스크립트 x

*코딩테스트
> 멍~
> 어디서

*저녁반, JS 재직자반
=> 백엔드 개발 / Java, C++
=> 스타트업 회사 / Node.js

*간단한 알고리즘

*지난시간 코딩 테스트!!!! 16개문제






