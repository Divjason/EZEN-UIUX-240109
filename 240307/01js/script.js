// 서버 & 통신
// 1.왜 필요한가? 이유 설득 & 합리적
// html, css, js => 기초 문법 / 예제

// ToDoList =>
// 1) 기본 레이아웃 정렬
// 2) DOM 사용자 데이터 값을 수신
// 3) 의도한 화면 영역에 출력 이벤트
// 4) 사용자 수신받은 데이터 저장 기능

// 만약, 용량 큰 데이터를 사용자 받아서 처리해야하는 상황이라면?
// html & CSS
// 어딘가에 문안 & 이미지 & 동영상 호스팅 => 가져다가?

// 서버 : 사용자가 입력한 데이터를 보관.처리하는 웹 상의 가상 공간

// 프론트엔드개발자 : 사용자 데이터 + UI 레이아웃 설계 구현

// 풀스택개발 || 백엔드개발자 서버구현(*구축) + 데이터 비관계형 & 관계형 데이터 베이스 설계 => 데이터를 사용할 수 있도록 만드는 작업

// input => id & pw
// 약속!!! 지켜야지만 서버에게 데이터를 보낼 수도 있고, 가져올 수도 있음
// 서버 통신은 "규약"이 존재!! => 프로토콜
// hyper text tranfer protocol
// https://www.naver.com
// https://www.google.com

// http : 신뢰할 수 없는 웹 사이트 돌아가세요!!
// 고급기능 : url

// s : security : 보안 => 보안패치 설치!!
// 보안

// 서버와 통신규약을 지켰다!!!
// 데이터를 가져오던가 || 데이터를 전달하던가

// method : get => 서버에 특정 데이터를 요청하겠다는 의미!!
// method : post => 서버에 특정 데이터를 주겠다는 의미!!

// firebase Deploy
// 200 : 서버에 정상적으로 자료를 요청했고, 서버 역시 정상적으로 자료를 전송해주었다는 의미
// 404 : 서버에 어떤 데이터를 요청했는데, 그 데이터를 찾지 못할 때 서버가 알려주는 번호!!
// 503 : 정상적으로 서버에 데이터를 요청했으나, 서버가 정상적으로 작동할 수 없음을 알려주는 번호!! => 서버가 다운되었다!!

// JSON : Javascript Object Notation
// 자바스크립트 객체 표기법

// const obj = {
//   title: "title",
//   price: 15000,
// };

// 만약!!! JS 언어를 그대로 가지고, 서버 구현 & 데이터 베이스 구축!!
// 1) 프론트엔드 개발 VS 백엔드 개발 => 연봉 차이x
// 2) 태초에 JS => 웹브라우저에서만 사용할 수 있도록 만든 한정적인 제약 언어!!
// 3) 서버 구현 & 저장 데이터 관리할 수 있도록 해주는 언어 Java & C++ || C# || C 언어 전통적으로 서버에서 사용할 수 있는 언어들!!
// 4) UI 영역 각광을 받은지 얼마안됨!!
// 5) 서버 측 언어!! JS => 언어!!

// const student = {
//   name: "영심이",
//   major: "체육교육",
//   grade: 3,
// };

// const json = JSON.stringify(student);

// console.log(student);
// console.log(json);

// const json_obj = JSON.parse(student_json);

// 서버와 "우리"가 통신
// 서버와 "클라이언트"가 통신규약 아래에서 통신!!

// AJAX : 클라이언트 & 서버간 통신을 할 수 있도록 해주는 통신기법
// Asynchronous Javascript And XML
// Asynchronous : 비동기
// Javascript : 웹 사용가능 자바스크립트 언어
// JSON : 언어를 의미하는 것이 아니라, 자바스크립트 언어 <=> 서버가 이해할 수 있도록 변환시켜주는 표기법 / 서버에서 가져온 데이터 <=> 웹 브라우저가 이해할 수 있도록 변환시켜주는 표기법
// XML : 과거 서버에서 실질적으로 사용할 수 있는 언어
