1.react app 실행시킬 때에는 반드시 root폴더에서 시작해야함!!!

2.터미널 : ctrl + `
> cmd

3.npx create-react-app "프로젝트명"
npx create-react-app .

4.react => 예약어 사용하지 마세요!!
(*폴더명 사용불가!!!)

5.삭제를 하고 시작해야하는 데이터
- src/App.test.js
- src/logo.svg
- src/report~
- src/setup~
- index.js > StrictMode 삭제

6.class 형식으로 컴포넌트
=> function 형식으로 

7.react에서는 외부스타일 사용빈도가 그렇게 높지 x
=> styled-component
=> tailwind

8.JSX 문법 특징
- 반드시 1개의 부모가 존재해야한다!!
- 원시타입 변수는 직접사용가능
(*단, 사용 시 { } 표기 필수)
- 참조타입 변수 중 객체의 경우는 직접사용불가
(*객체안에 key를 활용해서 value)
- 조건부 렌더링
- 삼항조건연산자

9.Props : 객체 
> key : value => property
property의 약어!! => 속성(값)
*컴포넌트간에 데이터를 전달할 수 있는 기능
A : a_1 객체를 B
Props : 규칙 => 부모 컴포넌트가 자식 컴포넌트에게 일방통행으로 데이터를 전달할 수 있음
*형제 컴포넌트간에 어떻게 데이터?
부모 => 자식 O
자식 => 부모 x
형제 => 형제 x

=> useContext / React Hooks
=> middleware / Redux || Recoil || React query
=> Redux thunk 외 

// 웹 브라우저 빨간색 경고창이 나왔다는 것은 리액트 실행을 전면적으로 중단!!! 서비스 중단

props는 반드시 부모에서 자녀에게만 데이터를 줄 수 있음!!

props의 자료형태는 반드시 객체의 타입!!!

props로 데이터를 받아올 때, 구조분해할당을 통해 바로 변수값으로 찾아올 수 있음
(*이때, 반드시 객체 내 key 네이밍과 동일한 변수명을 설정)

심지어 props는 컴포넌트로 전송이 가능함!!!
(*단, 컴포넌트를 전송할 때에는 key값이 children으로 자동 설정됨)

*지금까지 리액트를 활용한 예제 : 정적인 변경사항 존재
버튼 : 알림창!!!

*컴포넌트 간에 props 전달!!

*웹브라우저 상에서 동적인 변화가 발생되었을 때, 감지하고, 업데이트를 시켜줄 수 있어야 => 데이터를 가공.편집.전송

1) 사용자가 입력한 값

2) 사용자가 값을 입력했다는 사실을 인지할 수 있어야한다
=> 사용자로 인하여 상태가 업데이트가 되었다

3) 사용자가 입력한 값을 가져온다

*state!!!! => 상태변화의 값을 컨트롤 하기 위해서 리액트만의 문법 하나를 더 공부!!!

useState
useEffect
useContext
useRef

*meta : 개발자 구현 기능 다양
*react Hooks

숫자 하단에 버튼을 생성하고, 그 버튼이 클릭될 때마다 값이 증가하게 만들고 싶다!!!

*state : 컴포넌트 안에 존재하는 어떠한 상태 값
(*단, 1개의 컴포넌트 안에는 다양한 복수의 state 값 존재 가능!!!)

*state의 상태 값을 변화시킬 수 있는 (*제어할 수 있는) 리액트 훅이 존재
=> useState 훅 => 함수

*useState 훅 함수 실행 => 배열값을 반환!!! => 초기값 / 초기값을 변경시킬 수 있는 함수

*구조분해할당 방식으로 작성

*useState 리액트 훅을 사용해서 state의 상태값이 변경될 때마다 웹 브라우저는 해당 컴포넌트를 다시 랜더링한다!! = 다시 새로고침해서 불러온다 => 리랜더링!!

IT 업계 명언 : 존재하는 수레바퀴를 다시 만들지 마라!!!

2개의 자바스크립트 플러그인!!
> anime.js
> fullpage.js

=> fullpage
1) 섹션 나누는 방법
2) 우측상단 네비게이션 클릭 시, 이동
3) 우측중간 이동버튼

=> anime
1) svg 활용 애니메이션 : 모핑 / 드로잉 효과 / 로테이션
2) stagger : 아이템 순차적으로 애니메이션 적용
3) timeline : 전체 총 애니메이션 플로우 컨트롤 목적 타임라인
4) 함수를 기반 / 옵션 객체형태로 사용










